[{"C:\\Users\\User\\Desktop\\aflix\\src\\index.js":"1","C:\\Users\\User\\Desktop\\aflix\\src\\Routers.js":"2","C:\\Users\\User\\Desktop\\aflix\\src\\Home\\index.js":"3","C:\\Users\\User\\Desktop\\aflix\\src\\Login\\index.js":"4","C:\\Users\\User\\Desktop\\aflix\\src\\Dashboard\\index.js":"5","C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\navbar-top.js":"6","C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\statistics_cards.js":"7","C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\footer.js":"8","C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\items.js":"9","C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\tv-show-grid.js":"10","C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\search-form.js":"11","C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\loading.js":"12","C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\movie-grid.js":"13"},{"size":209,"mtime":1610463269600,"results":"14","hashOfConfig":"15"},{"size":670,"mtime":1610849612732,"results":"16","hashOfConfig":"15"},{"size":213,"mtime":1610849071999,"results":"17","hashOfConfig":"15"},{"size":1432,"mtime":1610849123368,"results":"18","hashOfConfig":"15"},{"size":418,"mtime":1611524304770,"results":"19","hashOfConfig":"15"},{"size":2222,"mtime":1610488458421,"results":"20","hashOfConfig":"15"},{"size":1460,"mtime":1611524055667,"results":"21","hashOfConfig":"15"},{"size":528,"mtime":1611526547564,"results":"22","hashOfConfig":"15"},{"size":9623,"mtime":1611689081685,"results":"23","hashOfConfig":"15"},{"size":2661,"mtime":1611691442057,"results":"24","hashOfConfig":"15"},{"size":1260,"mtime":1611525534987,"results":"25","hashOfConfig":"15"},{"size":279,"mtime":1610824389470,"results":"26","hashOfConfig":"15"},{"size":7250,"mtime":1611759637899,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"16w0t7e",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Desktop\\aflix\\src\\index.js",[],["56","57"],"C:\\Users\\User\\Desktop\\aflix\\src\\Routers.js",[],"C:\\Users\\User\\Desktop\\aflix\\src\\Home\\index.js",[],"C:\\Users\\User\\Desktop\\aflix\\src\\Login\\index.js",[],"C:\\Users\\User\\Desktop\\aflix\\src\\Dashboard\\index.js",[],"C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\navbar-top.js",[],"C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\statistics_cards.js",[],"C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\footer.js",[],"C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\items.js",["58"],"import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nimport SearchForm from \"../Parts/search-form\";\r\nimport MovieGrid from \"../Parts/movie-grid\";\r\nimport TvShowGrid from \"../Parts/tv-show-grid\";\r\nimport Loading from \"../Parts/loading\";\r\n\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nrequire('./styles/movie-and-tv-show-grid.css');\r\n\r\nconst { MovieDb } = require(\"moviedb-promise\");\r\nconst moviedb = new MovieDb(\"d752ed1f70642181ead03a75e9588471\");\r\n\r\nvar pageMovie = 1;\r\nvar pageTvShow = 1;\r\n\r\nconst styles = {\r\n  buttonGoUp: {\r\n    right: 0,\r\n    width: \"5%\",\r\n    height: \"10%\",\r\n  },\r\n};\r\n\r\nfunction Items({ data }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [movieGenres, setMovieGenres] = useState([]);\r\n  const [movieTotalPage, setMovieTotalPage] = useState(1);\r\n\r\n  const [tvShow, setTvShow] = useState([]);\r\n  const [tvShowGenres, setTvShowGenres] = useState([]);\r\n  const [tvShowTotalPage, setVvShowTotalPage] = useState(1);\r\n\r\n  const [isMoviesLoading, setIsMoviesLoading] = useState(true);\r\n  const [isTvShowLoading, setIsTvShowLoading] = useState(true);\r\n\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const [movieResultsCount, setMovieResultsCount] = useState();\r\n  const [tvShowResultsCount, setTvShowResultsCount] = useState();\r\n\r\n  const [lang, setLang] = useState(\"es-ES\");\r\n\r\n  const [showGoUpButton, setShowGoUpButton] = useState(false);\r\n\r\n  const fetchMovieData = useCallback(\r\n    (page) => {\r\n      moviedb\r\n        .moviePopular({ language: lang, page: page })\r\n        .then((res) => {\r\n          setMovieTotalPage(res[\"total_pages\"]);\r\n          setMovies((items) => res[\"results\"]);\r\n          setIsMoviesLoading(false);\r\n        })\r\n        .catch(console.error);\r\n    },\r\n    [lang]\r\n  );\r\n\r\n  const fetchTvShowData = useCallback(\r\n    (page) => {\r\n      moviedb\r\n        .tvPopular({ language: lang, page: page })\r\n        .then((res) => {\r\n          setVvShowTotalPage(res[\"total_pages\"]);\r\n          setTvShow((items) => res[\"results\"]);\r\n          setIsTvShowLoading(false);\r\n        })\r\n        .catch(console.error);\r\n    },\r\n    [lang]\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchMovieData(pageMovie);\r\n  }, [fetchMovieData]);\r\n\r\n  useEffect(() => {\r\n    fetchTvShowData(pageTvShow);\r\n  }, [fetchTvShowData]);\r\n\r\n  useEffect(() => {\r\n    moviedb\r\n      .genreMovieList({ language: lang })\r\n      .then((res) => {\r\n        setMovieGenres(res[\"genres\"]);\r\n      })\r\n      .catch(console.error);\r\n\r\n    moviedb\r\n      .genreTvList({ language: lang })\r\n      .then((res) => {\r\n        setTvShowGenres(res[\"genres\"]);\r\n      })\r\n      .catch(console.error);\r\n  }, [lang]);\r\n\r\n  function handleMoviePagination(e) {\r\n    var selectedPage = e.selected + 1;\r\n    fetchMovieData(selectedPage);\r\n  }\r\n\r\n  function handleTvShowPagination(e) {\r\n    var selectedPage = e.selected + 1;\r\n    fetchTvShowData(selectedPage);\r\n  }\r\n\r\n  function handleMovieSearchPagination(e) {\r\n    var selectedPage = e.selected + 1;\r\n    searchHandled(query, selectedPage);\r\n  }\r\n\r\n  function handleTvShowSearchPagination(e) {\r\n    var selectedPage = e.selected + 1;\r\n    searchHandled(query, selectedPage);\r\n  }\r\n\r\n  const moviesAndTvShowElements = (\r\n    <div>\r\n      {\" \"}\r\n      <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\r\n        <li className=\"nav-item\" role=\"presentation\">\r\n          <a\r\n            className=\"nav-link active\"\r\n            id=\"movie-tab\"\r\n            data-bs-toggle=\"tab\"\r\n            href=\"#movie\"\r\n            role=\"tab\"\r\n            aria-controls=\"movie\"\r\n            aria-selected=\"true\"\r\n          >\r\n            Pel&iacute;culas{\" \"}\r\n            {movieResultsCount > 0 ? <span>({movieResultsCount})</span> : \"\"}\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\" role=\"presentation\">\r\n          <a\r\n            className=\"nav-link\"\r\n            id=\"tv-show-tab\"\r\n            data-bs-toggle=\"tab\"\r\n            href=\"#tv-show\"\r\n            role=\"tab\"\r\n            aria-controls=\"tv-show\"\r\n            aria-selected=\"false\"\r\n          >\r\n            Series{\" \"}\r\n            {tvShowResultsCount > 0 ? <span>({tvShowResultsCount})</span> : \"\"}\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\" id=\"myTabContent\">\r\n        <div\r\n          className=\"tab-pane fade show active\"\r\n          id=\"movie\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"nav-movie-tab\"\r\n        >\r\n          {isMoviesLoading ? (\r\n            <Loading />\r\n          ) : movies.length === 0 ? (\r\n            <h4>No hay resultados en pel&iacute;culas...</h4>\r\n          ) : (\r\n            <MovieGrid data={movies} movieGenres={movieGenres} lang={lang} />\r\n          )}\r\n\r\n          <ReactPaginate\r\n            previousLabel={\"Atras\"}\r\n            nextLabel={\"Siguiente\"}\r\n            breakLabel={\"...\"}\r\n            breakClassName={\"page-item\"}\r\n            breakLinkClassName=\"page-link\"\r\n            previousClassName=\"page-item\"\r\n            previousLinkClassName=\"page-link\"\r\n            nextLinkClassName=\"page-link\"\r\n            nextClassName=\"page-item\"\r\n            pageCount={movieTotalPage}\r\n            marginPagesDisplayed={5}\r\n            pageRangeDisplayed={5}\r\n            onPageChange={\r\n              query === \"\" ? handleMoviePagination : handleMovieSearchPagination\r\n            }\r\n            pageClassName=\"page-item\"\r\n            pageLinkClassName=\"page-link\"\r\n            containerClassName={\"pagination\"}\r\n            activeClassName={\"active\"}\r\n          />\r\n        </div>\r\n\r\n        <div\r\n          className=\"tab-pane fade\"\r\n          id=\"tv-show\"\r\n          role=\"tabpanel\"\r\n          aria-labelledby=\"nav-tv-show-tab\"\r\n        >\r\n          {isTvShowLoading ? (\r\n            <Loading />\r\n          ) : tvShow.length === 0 ? (\r\n            <h4>No hay resultados en series...</h4>\r\n          ) : (\r\n            <TvShowGrid data={tvShow} tvShowGenres={tvShowGenres} />\r\n          )}\r\n          <ReactPaginate\r\n            previousLabel={\"Atras\"}\r\n            nextLabel={\"Siguiente\"}\r\n            breakLabel={\"...\"}\r\n            breakClassName={\"page-item\"}\r\n            breakLinkClassName=\"page-link\"\r\n            previousClassName=\"page-item\"\r\n            previousLinkClassName=\"page-link\"\r\n            nextLinkClassName=\"page-link\"\r\n            nextClassName=\"page-item\"\r\n            pageCount={tvShowTotalPage}\r\n            marginPagesDisplayed={2}\r\n            pageRangeDisplayed={5}\r\n            onPageChange={\r\n              query === \"\"\r\n                ? handleTvShowPagination\r\n                : handleTvShowSearchPagination\r\n            }\r\n            pageClassName=\"page-item\"\r\n            pageLinkClassName=\"page-link\"\r\n            containerClassName={\"pagination\"}\r\n            activeClassName={\"active\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  function searchHandled(query, page) {\r\n    setIsMoviesLoading(true);\r\n    setIsTvShowLoading(true);\r\n    setQuery(query);\r\n\r\n    moviedb\r\n      .searchMovie({ language: lang, query: query, page: page })\r\n      .then((res) => {\r\n        setMovieTotalPage(res[\"total_pages\"]);\r\n        setMovieResultsCount(res[\"total_results\"]);\r\n        setMovies([]);\r\n        setMovies((items) => res[\"results\"]);\r\n        setIsMoviesLoading(false);\r\n      })\r\n      .catch(console.error);\r\n\r\n    moviedb\r\n      .searchTv({ language: lang, query: query, page: page })\r\n      .then((res) => {\r\n        setVvShowTotalPage(res[\"total_pages\"]);\r\n        setTvShowResultsCount(res[\"total_results\"]);\r\n        setTvShow([]);\r\n        setTvShow((items) => res[\"results\"]);\r\n        setIsTvShowLoading(false);\r\n      })\r\n      .catch(console.error);\r\n  }\r\n\r\n  function handleIsSearchEmpty(val) {\r\n    if (val) {\r\n      setQuery(\"\");\r\n      fetchMovieData(1);\r\n      fetchTvShowData(1);\r\n      setMovieResultsCount(0);\r\n      setTvShowResultsCount(0);\r\n    }\r\n  }\r\n\r\n  function handleScroll() {\r\n    const windowHeight =\r\n      \"innerHeight\" in window\r\n        ? window.innerHeight\r\n        : document.documentElement.offsetHeight;\r\n    const body = document.body;\r\n    const html = document.documentElement;\r\n    const docHeight = Math.max(\r\n      body.scrollHeight,\r\n      body.offsetHeight,\r\n      html.clientHeight,\r\n      html.scrollHeight,\r\n      html.offsetHeight\r\n    );\r\n    const windowBottom = windowHeight + window.pageYOffset;\r\n    if (windowBottom >= docHeight) {\r\n      setShowGoUpButton(true);\r\n    }\r\n\r\n    if (window.pageYOffset <= 0) {\r\n      setShowGoUpButton(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n  });\r\n\r\n  function backToTop() {\r\n    document.body.scrollTop = 0; // For Safari\r\n    document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\r\n    setShowGoUpButton(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <SearchForm\r\n        searchHandled={searchHandled}\r\n        isSearchEmpty={handleIsSearchEmpty}\r\n      />\r\n\r\n      {query === \"\" ? (\r\n        \"\"\r\n      ) : (\r\n        <h3>\r\n          Resultados de: <span className=\"text-danger\">{query}</span>\r\n        </h3>\r\n      )}\r\n\r\n      {moviesAndTvShowElements}\r\n\r\n      {showGoUpButton ? (\r\n        <button\r\n          type=\"button\"\r\n          onClick={backToTop}\r\n          className=\"btn btn-info rounded-circle bottom-0 m-2 mb-3 position-fixed\"\r\n          style={styles.buttonGoUp}\r\n        >\r\n          <FontAwesomeIcon icon={faArrowUp} />\r\n        </button>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Items;","C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\tv-show-grid.js",[],"C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\search-form.js",[],"C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\loading.js",[],"C:\\Users\\User\\Desktop\\aflix\\src\\Parts\\movie-grid.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":45,"column":16,"nodeType":"65","messageId":"66","endLine":45,"endColumn":23},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'setLang' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]